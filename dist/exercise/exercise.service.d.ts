import { CreateCompleteExerciseDto } from './dto/create-complete-exercise.dto.js';
import { UpdateExerciseDto } from './dto/update-complete-exercise.dto.js';
import { Exercise } from './entities/exercise.entity.js';
import { Questions } from './entities/questions.js';
import { Choices } from './entities/choices.js';
import { GapFilling } from './entities/gap_filling.js';
import { MatchingExercise } from './entities/matching_pairs.js';
import { TypingExercise } from './entities/typing_answers.js';
import { Sequelize } from 'sequelize-typescript';
export declare class ExerciseService {
    private exerciseModel;
    private questionsModel;
    private choicesModel;
    private gapFillingModel;
    private matchingExerciseModel;
    private typingExerciseModel;
    private sequelize;
    constructor(exerciseModel: typeof Exercise, questionsModel: typeof Questions, choicesModel: typeof Choices, gapFillingModel: typeof GapFilling, matchingExerciseModel: typeof MatchingExercise, typingExerciseModel: typeof TypingExercise, sequelize: Sequelize);
    create(createExerciseDto: CreateCompleteExerciseDto): Promise<Exercise>;
    findAll(): Promise<Exercise[]>;
    findOne(id: string): Promise<Exercise>;
    findByLessonId(lessonId: string): Promise<Exercise[]>;
    findByType(exerciseType: string): Promise<Exercise[]>;
    findByTypeAndLessonId(exerciseType: string, lessonId: string): Promise<Exercise[]>;
    getQuestionsForExercise(exerciseId: string): Promise<Questions[]>;
    update(id: string, updateExerciseDto: UpdateExerciseDto): Promise<Exercise>;
    remove(id: string): Promise<void>;
    private getIncludeOptions;
    private deleteExistingQuestions;
    private createChoices;
    private createGapFilling;
    private createMatchingPairs;
    private createTypingExercise;
}
